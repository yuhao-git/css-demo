// 立圆环
var group = new THREE.Group();
function addShapeDRN(shape, extrudeSettings, color, x, y, z, rx, ry, rz, s) {

    // flat shape with texture
    // note: default UVs generated by ShapeBufferGeometry are simply the x- and y-coordinates of the vertices
    /**
     * ShapeBufferGeometry形状缓冲几何体
     */

    var geometry = new THREE.ShapeBufferGeometry(shape);
    /**
     * 网格（Mesh）
     * MaterialPhong网格材质(MeshPhongMaterial)
     一种用于具有镜面高光的光泽表面的材质。
     * **/


    // extruded shape挤压成形
    /**
     * ExtrudeBufferGeometry
     * 挤压缓冲几何体
     * 从一个形状路径中，挤压出一个BufferGeometry。
     * */
    /**
     * 网格（Mesh）
     * MaterialPhong网格材质(MeshPhongMaterial)
     一种用于具有镜面高光的光泽表面的材质。
     * **/
    var geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);
    var material = new THREE.MeshPhysicalMaterial({ color: color, opacity: 0.6, transparent: true })
    var mesh = new THREE.Mesh(geometry, material);
    mesh.position.set(x, y, z - 75);
    mesh.rotation.set(rx, ry, rz);
    mesh.scale.set(s, s, s); 
    group.add(mesh);
    var mesh2 = mesh.clone();
    mesh2.rotateZ(Math.PI * 2 / 6)
    group.add(mesh2);
    var mesh3 = mesh2.clone();
    mesh3.rotateZ(Math.PI * 2 / 6)
    group.add(mesh3);
    var mesh4 = mesh3.clone();
    mesh4.rotateZ(Math.PI * 2 / 6)
    group.add(mesh4);
    var mesh5 = mesh4.clone();
    mesh5.rotateZ(Math.PI * 2 / 6)
    group.add(mesh5);
    var mesh6 = mesh5.clone();
    mesh6.rotateZ(Math.PI * 2 / 6)
    group.add(mesh6);

}
// Arc circle圆弧drn
/**
 * absarc ( x : Float, y : Float, radius : Float, startAngle : Float, endAngle : Float, clockwise : Float ) : null
 * x, y -- 弧线的绝对中心。
 * radius -- 弧线的半径。
 * startAngle -- 起始角，以弧度来表示。
 *endAngle -- 终止角，以弧度来表示。
 *clockwise -- 以顺时针方向创建（扫过）弧线。默认值为false。
 * @type {Shape}
 */
/**
 *.arc ( x : Float, y : Float, radius : Float, startAngle : Float, endAngle : Float, clockwise : Float ) : null
 x, y -- 弧线的中心来自上次调用后的偏移量。
 radius -- 弧线的半径。
 startAngle -- 起始角，以弧度来表示。
 endAngle -- 终止角，以弧度来表示。
 clockwise -- 以顺时针方向创建（扫过）弧线。默认值为false。
 */
var arcShapeDrn01 = new THREE.Shape();
//  需要长：280，高300 平分6分，60度，中间有间隙取50度，  通过公式，为L=n× π× r/180，L=α× r。其中n是圆心角度数，r是半径，L是圆心角弧长得 r=320,n=50,弧度=280，
arcShapeDrn01.moveTo(3.48, 0);
arcShapeDrn01.lineTo(3.5, 0);
arcShapeDrn01.absarc(0, 0, 3.5, 0, Math.PI * 2 / 6 / 6 * 5.8, false);
arcShapeDrn01.absarc(0, 0, 3.48, Math.PI * 2 / 6 / 6 * 5.8, 0, true);
var arcShapeDrn02 = arcShapeDrn01



/**
 *curveSegments — int，曲线上点的数量，默认值是12。
 steps — int，用于沿着挤出样条的深度细分的点的数量，默认值为1。
 depth — float，挤出的形状的深度，默认值为100。
 bevelEnabled — bool，对挤出的形状应用是否斜角，默认值为true。
 bevelThickness — float，设置原始形状上斜角的厚度。默认值为6。
 bevelSize — float。斜角与原始形状轮廓之间的延伸距离，默认值为bevelThickness-2。
 bevelSegments — int。斜角的分段层数，默认值为3。
 extrudePath — THREE.CurvePath对象。一条沿着被挤出形状的三维样条线。
 UVGenerator — Object。提供了UV生成器函数的对象。
 */
var extrudeSettings = {
    depth: 0.6,
    bevelEnabled: false,
    bevelSegments: 9,
    steps: 20,
    bevelSize: 0,
    bevelThickness: 0
};

addShapeDRN(arcShapeDrn02, extrudeSettings, 0x6188d2, 0, 0, 0, 0, 0, 0, 1);

group.position.set(0, 0, 75)

export default group;